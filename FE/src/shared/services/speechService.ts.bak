import Voice from '@react-native-voice/voice';

export interface SpeechRecognitionResult {
  text: string;
  confidence?: number;
}

export class SpeechService {
  private static instance: SpeechService | null = null;
  private isRecording = false;
  private onResult: ((result: SpeechRecognitionResult) => void) | null = null;
  private onError: ((error: string) => void) | null = null;

  private constructor() {
    this.initializeVoice();
  }

  public static getInstance(): SpeechService {
    if (!SpeechService.instance) {
      SpeechService.instance = new SpeechService();
    }
    return SpeechService.instance;
  }

  private initializeVoice() {
    Voice.onSpeechStart = this.onSpeechStart;
    Voice.onSpeechRecognized = this.onSpeechRecognized;
    Voice.onSpeechEnd = this.onSpeechEnd;
    Voice.onSpeechError = this.onSpeechError;
    Voice.onSpeechResults = this.onSpeechResults;
  }

  private onSpeechStart = () => {
    console.log('음성 인식 시작');
    this.isRecording = true;
  };

  private onSpeechRecognized = () => {
    console.log('음성 인식됨');
  };

  private onSpeechEnd = () => {
    console.log('음성 인식 종료');
    this.isRecording = false;
  };

  private onSpeechError = (error: any) => {
    console.error('음성 인식 오류:', error);
    this.isRecording = false;
    if (this.onError) {
      this.onError(error.message || '음성 인식 중 오류가 발생했습니다.');
    }
  };

  private onSpeechResults = (result: any) => {
    console.log('음성 인식 결과:', result);
    if (result.value && result.value.length > 0) {
      const text = result.value[0];
      if (this.onResult) {
        this.onResult({
          text,
          confidence: 1.0, // 네이티브 API에서 confidence 제공 안 할 수 있음
        });
      }
    }
  };

  public async startRecording(
    onResult: (result: SpeechRecognitionResult) => void,
    onError: (error: string) => void,
    options?: {
      language?: string; // 'ko-KR', 'en-US' 등
      timeout?: number;
    }
  ): Promise<void> {
    try {
      this.onResult = onResult;
      this.onError = onError;

      // 진행 중인 인식이 있다면 중지
      if (this.isRecording) {
        await this.stopRecording();
      }

      // 음성 인식 시작
      await Voice.start(options?.language || 'ko-KR');
      console.log('음성 인식 시작됨');
    } catch (error) {
      console.error('음성 인식 시작 실패:', error);
      onError('음성 인식을 시작할 수 없습니다.');
    }
  }

  public async stopRecording(): Promise<void> {
    try {
      await Voice.stop();
      this.isRecording = false;
      console.log('음성 인식 중지됨');
    } catch (error) {
      console.error('음성 인식 중지 실패:', error);
    }
  }

  public async cancelRecording(): Promise<void> {
    try {
      await Voice.cancel();
      this.isRecording = false;
      console.log('음성 인식 취소됨');
    } catch (error) {
      console.error('음성 인식 취소 실패:', error);
    }
  }

  public getIsRecording(): boolean {
    return this.isRecording;
  }

  public async isAvailable(): Promise<boolean> {
    try {
      return await Voice.isAvailable();
    } catch (error) {
      console.error('음성 인식 가용성 확인 실패:', error);
      return false;
    }
  }

  public async getSupportedLanguages(): Promise<string[]> {
    try {
      return await Voice.getSupportedLanguages();
    } catch (error) {
      console.error('지원 언어 조회 실패:', error);
      return ['ko-KR'];
    }
  }

  public destroy() {
    Voice.destroy().then(Voice.removeAllListeners);
    SpeechService.instance = null;
  }
}

// 싱글톤 인스턴스 export
export const speechService = SpeechService.getInstance();